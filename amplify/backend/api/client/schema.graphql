type CognitoMFAOption {
  DeliveryMedium: String
  AttributeName: String
}

type CognitoUser {
  Username: String!
  UserAttributes: [CognitoUserAttribute]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: CognitoUserStatus
  MFAOptions: [CognitoMFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}

type CognitoUserAttribute {
  Name: String!
  Value: String
}

enum CognitoUserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}

input CreateCustomerAccountInput {
  customerUsername: ID!
}

input CreateStudentAccountInput {
  givenName: String!
  familyName: String!
  birthdate: AWSDate!
  email: AWSEmail!
}

input DeleteCustomerAccountInput {
  id: ID!
}

input DeleteStudentAccountInput {
  id: ID
}

input ModelCustomerAccountConditionInput {
  and: [ModelCustomerAccountConditionInput]
  or: [ModelCustomerAccountConditionInput]
  not: ModelCustomerAccountConditionInput
}

input ModelStudentAccountConditionInput {
  and: [ModelStudentAccountConditionInput]
  or: [ModelStudentAccountConditionInput]
  not: ModelStudentAccountConditionInput
}

type Mutation {
  createCustomerAccount(
    input: CreateCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  createStudentAccount(
    input: CreateStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  deleteCustomerAccount(
    input: DeleteCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  deleteStudentAccount(
    input: DeleteStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount
}

# !!!
# TODO: change the name of this type to CustomerAccount
type CustomerAccount
  @auth(rules: [{ allow: private, provider: iam }])
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "customerAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  stripeCustomerId: ID!
}

#type StudentSubscription

#}

# return this from stripe directly, similarly to how cognito user is returned from cognito
#type StripeCustomer {

#}

# return this from stripe directly, similarly to how cognito user is returned from cognito
#type StripeSubscription {

#}

# return this from stripe directly, similarly to how cognito user is returned from cognito
#type StripeUsageRecord {

#}

#type Workspace {

#}

#type WorkspaceUsageRecord {

#}

type StudentAccount
  @auth(
    rules: [
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: groups, groups: ["Teachers"], operations: [read] }
      {
        allow: owner
        ownerField: "customerUsername"
        operations: [read, delete]
      }
      { allow: owner, ownerField: "studentUsername", operations: [read] }
    ]
  )
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "studentAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  customerUser: CognitoUser @function(name: "resolveField-${env}")
  studentUsername: ID!
  studentUser: CognitoUser @function(name: "resolveField-${env}")
}

type Subscription {
  onCreateCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["createCustomerAccount"])

  onCreateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["createStudentAccount"])

  onDeleteCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["deleteCustomerAccount"])

  onDeleteStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["deleteStudentAccount"])
}
