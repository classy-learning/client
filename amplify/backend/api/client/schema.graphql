type CognitoMFAOption {
  DeliveryMedium: String
  AttributeName: String
}

type CognitoUser {
  Username: String!
  UserAttributes: [CognitoUserAttribute]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: CognitoUserStatus
  MFAOptions: [CognitoMFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}

type CognitoUserAttribute {
  Name: String!
  Value: String
}

enum CognitoUserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}

input CreateStripeCustomerInput {
  customerUsername: ID!
}

input CreateStudentAccountInput {
  givenName: String!
  familyName: String!
  birthdate: AWSDate!
  email: AWSEmail!
}

input DeleteStripeCustomerInput {
  id: ID!
}

input DeleteStudentAccountInput {
  id: ID
}

input ModelStripeCustomerConditionInput {
  and: [ModelStripeCustomerConditionInput]
  or: [ModelStripeCustomerConditionInput]
  not: ModelStripeCustomerConditionInput
}

input ModelStudentAccountConditionInput {
  and: [ModelStudentAccountConditionInput]
  or: [ModelStudentAccountConditionInput]
  not: ModelStudentAccountConditionInput
}

type Mutation {
  createStripeCustomer(
    input: CreateStripeCustomerInput!
    condition: ModelStripeCustomerConditionInput
  ): StripeCustomer

  createStudentAccount(
    input: CreateStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  deleteStripeCustomer(
    input: DeleteStripeCustomerInput!
    condition: ModelStripeCustomerConditionInput
  ): StripeCustomer

  deleteStudentAccount(
    input: DeleteStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount
}

type StripeCustomer
  @auth(rules: [{ allow: private, provider: iam }])
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "stripeCustomersByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  stripeCustomerId: ID!
}

type StudentAccount
  @auth(
    rules: [
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: groups, groups: ["Teachers"], operations: [read] }
      {
        allow: owner
        ownerField: "customerUsername"
        operations: [read, delete]
      }
      { allow: owner, ownerField: "studentUsername", operations: [read] }
    ]
  )
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "studentAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  customerUser: CognitoUser @function(name: "resolveField-${env}")
  studentUsername: ID!
  studentUser: CognitoUser @function(name: "resolveField-${env}")
}

type Subscription {
  onCreateStripeCustomer(
    customerUsername: String
    stripeCustomerId: String
  ): StripeCustomer @aws_subscribe(mutations: ["createStripeCustomer"])

  onCreateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["createStudentAccount"])

  onDeleteStripeCustomer(
    customerUsername: String
    stripeCustomerId: String
  ): StripeCustomer @aws_subscribe(mutations: ["deleteStripeCustomer"])

  onDeleteStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["deleteStudentAccount"])
}
