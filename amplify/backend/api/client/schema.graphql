type CognitoMFAOption {
  DeliveryMedium: String
  AttributeName: String
}

type CognitoUser {
  Username: String!
  UserAttributes: [CognitoUserAttribute]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: CognitoUserStatus
  MFAOptions: [CognitoMFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}

type CognitoUserAttribute {
  Name: String!
  Value: String
}

enum CognitoUserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}

input CreateCustomerAccountInput {
  customerUsername: ID!
}

input CreateLessonInput {
  studentAccountId: ID!
  teacherAccountId: ID!
  start: AWSDateTime
  end: AWSDateTime
}

input CreateStudentAccountInput {
  givenName: String!
  familyName: String!
  birthdate: AWSDate!
  email: AWSEmail!
}

input CreateTeacherAccountInput {
  givenName: String!
  familyName: String!
  email: AWSEmail!
  phone: AWSPhone!
}

type CustomerAccount
  @auth(rules: [{ allow: private, provider: iam }])
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "customerAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  stripeCustomerId: ID!
}

input DeleteCustomerAccountInput {
  id: ID!
}

input DeleteLessonInput {
  id: ID!
}

input DeleteStudentAccountInput {
  id: ID
}

input DeleteTeacherAccountInput {
  id: ID
}

type Lesson
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admins"] }
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: owner, ownerField: "studentUsername", operations: [read] }
      { allow: owner, ownerField: "customerUsername", operations: [read] }
      { allow: owner, ownerField: "teacherUsername", operations: [read] }
    ]
  )
  @key(
    name: "ByStudentAccountId"
    fields: ["studentAccountId"]
    queryField: "lessonsByStudentAccountId"
  )
  @key(
    name: "ByTeacherAccountId"
    fields: ["teacherAccountId"]
    queryField: "lessonsByTeacherAccountId"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID! @function(name: "resolveField-${env}")
  studentUsername: ID! @function(name: "resolveField-${env}")
  teacherUsername: ID! @function(name: "resolveField-${env}")
  stripeUsageRecordId: ID!
  stripeUsageRecord: StripeUsageRecord @function(name: "resolveField-${env}")
  studentAccountId: ID!
  studentAccount: StudentAccount @connection(fields: ["studentAccountId"])
  teacherAccountId: ID!
  teacherAccount: TeacherAccount @connection(fields: ["teacherAccountId"])
  timekitBookingId: ID!
  timekitBooking: TimekitBooking @connection(fields: ["timekitBookingId"])
}

# TODO: create StudentEvent type

input ModelCustomerAccountConditionInput {
  and: [ModelCustomerAccountConditionInput]
  or: [ModelCustomerAccountConditionInput]
  not: ModelCustomerAccountConditionInput
}

input ModelLessonConditionInput {
  and: [ModelLessonConditionInput]
  or: [ModelLessonConditionInput]
  not: ModelLessonConditionInput
}

input ModelStudentAccountConditionInput {
  and: [ModelStudentAccountConditionInput]
  or: [ModelStudentAccountConditionInput]
  not: ModelStudentAccountConditionInput
}

input ModelTeacherAccountConditionInput {
  and: [ModelTeacherAccountConditionInput]
  or: [ModelTeacherAccountConditionInput]
  not: ModelTeacherAccountConditionInput
}

type Mutation {
  createCustomerAccount(
    input: CreateCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  createLesson(
    input: CreateLessonInput!
    condition: ModelLessonConditionInput
  ): Lesson @aws_iam

  createStudentAccount(
    input: CreateStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  createTeacherAccount(
    input: CreateTeacherAccountInput!
    condition: ModelTeacherAccountConditionInput
  ): TeacherAccount

  deleteCustomerAccount(
    input: DeleteCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  deleteLesson(
    input: DeleteLessonInput!
    condition: ModelLessonConditionInput
  ): Lesson @aws_iam

  deleteStudentAccount(
    input: DeleteStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  deleteTeacherAccount(
    input: DeleteTeacherAccountInput!
    condition: ModelTeacherAccountConditionInput
  ): TeacherAccount

  updateLesson(input: UpdateLessonInput!): Lesson @aws_iam

  updateStudentAccount(input: UpdateStudentAccountInput!): StudentAccount
    @aws_iam
}

type Resource
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admins"] }
      { allow: groups, groups: ["Teachers"], operations: [create, update] }
      { allow: private, operations: [read] }
    ]
  )
  @model
  @searchable
  @versioned {
  id: ID!
  name: String!
  description: String
  url: AWSURL
  resourceTopics: [ResourceTopic!]!
    @connection(keyName: "ByResourceId", fields: ["id"])
}

type ResourceTopic
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admins"] }
      { allow: groups, groups: ["Teachers"], operations: [create, delete] }
      { allow: private, operations: [read] }
    ]
  )
  @key(
    name: "ByResourceId"
    fields: ["resourceId"]
    queryField: "resourceTopicByResourceId"
  )
  @key(
    name: "ByTopicId"
    fields: ["topicId"]
    queryField: "resourceTopicByTopicId"
  )
  @model(queries: null) {
  id: ID!
  resourceId: ID!
  resource: Resource @connection(fields: ["resourceId"])
  topicId: ID!
  topic: Topic @connection(fields: ["topicId"])
}

enum StripeAggregateUsageType {
  sum
  max
}

type StripeCard {
  brand: String!
  exp_month: Int!
  exp_year: Int!
  fingerprint: String!
  funding: StripeFundingType!
  last4: String!
}

type StripeCustomer {
  id: ID!
}

enum StripeFundingType {
  credit
  debit
  prepaid
  unknown
}

enum StripeIntervalType {
  day
  week
  month
  year
}

type StripePaymentMethod {
  id: ID!
  stripeCustomerId: ID
  type: StripePaymentMethodType!
  card: StripeCard
}

enum StripePaymentMethodType {
  alipay
  au_becs_debit
  bacs_debit
  bancontact
  card
  eps
  fpx
  giropay
  ideal
  p24
  sepa_debit
  sofort
}

type StripePrice {
  id: ID!
  product: StripeProduct!
  recurring: StripeRecurringPriceAttributes
  type: StripePriceType!
  unit_amount: Int!
}

enum StripePriceType {
  one_time
  recurring
}

type StripeProduct {
  id: ID!
  description: String
  name: String!
  unit_label: String
}

type StripeRecurringPriceAttributes {
  aggregate_usage: StripeAggregateUsageType!
  interval: StripeIntervalType!
  interval_count: Int!
  usage_type: StripeUsageType!
}

type StripeSubscription {
  id: ID!
  cancel_at_period_end: Boolean!
  current_period_end: AWSTimestamp!
  current_period_start: AWSTimestamp!
  customer: ID!
  default_payment_method: ID
  items: [StripeSubscriptionItem!]!
  status: StripeSubscriptionStatus!
}

type StripeSubscriptionItem {
  id: ID!
  price: StripePrice!
  quantity: Int!
  subscription: ID!
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

type StripeUsageRecord {
  id: ID!
  quantity: Int!
  subscription_item: ID!
  timestamp: AWSTimestamp
}

enum StripeUsageType {
  metered
  licensed
}

type StudentAccount
  @auth(
    rules: [
      { allow: groups, groups: ["Admins"] }
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: groups, groups: ["Teachers"], operations: [read] }
      {
        allow: owner
        ownerField: "customerUsername"
        operations: [read, delete]
      }
      { allow: owner, ownerField: "studentUsername", operations: [read] }
      { allow: private, provider: iam, operations: [read, update] }
    ]
  )
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "studentAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  lessons: [Lesson!]! @connection(keyName: "ByStudentAccountId", fields: ["id"])
  customerUsername: ID!
  customerUser: CognitoUser @function(name: "resolveField-${env}")
  studentUsername: ID!
  studentUser: CognitoUser @function(name: "resolveField-${env}")
  stripeSubscriptionId: ID!
  stripeSubscription: StripeSubscription @function(name: "resolveField-${env}")
  timekitCustomerId: ID!
  timekitCustomer: TimekitCustomer @function(name: "resolveField-${env}")
}

# TODO: update subscription inputs?
type Subscription {
  onCreateCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["createCustomerAccount"])

  onCreateLesson(customerUsername: String, studentUsername: String): Lesson
    @aws_subscribe(mutation: ["createLesson"])

  onCreateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["createStudentAccount"])

  onCreateTeacherAccount(
    teacherUsername: String
    teacherAccountId: String
  ): TeacherAccount @aws_subscribe(mutations: ["createTeacherAccount"])

  onDeleteCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["deleteCustomerAccount"])

  onDeleteLesson(customerUsername: String, studentUsername: String): Lesson
    @aws_subscribe(mutations: ["deleteLesson"])

  onDeleteStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["deleteStudentAccount"])

  onDeleteTeacherAccount(
    teacherUsername: String
    teacherAccountId: String
  ): TeacherAccount @aws_subscribe(mutations: ["deleteTeacherAccount"])

  onUpdateLesson(customerUsername: String, studentUsername: String): Lesson
    @aws_subscribe(mutations: ["updateLesson"])

  onUpdateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["updateStudentAccount"])
}

type TeachableTopic
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admins"] }
      { allow: private, operations: [read] }
    ]
  )
  @key(
    name: "ByTeacherAccountId"
    fields: ["teacherAccountId"]
    queryField: "teachableTopicByTeacherAccountId"
  )
  @key(
    name: "ByTopicId"
    fields: ["topicId"]
    queryField: "teachableTopicTopicByTopicId"
  )
  @model(queries: null) {
  id: ID!
  teacherAccountId: ID!
  teacherAccount: TeacherAccount @connection(fields: ["teacherAccountId"])
  topicId: ID!
  topic: Topic @connection(fields: ["topicId"])
}

type TeacherAccount
  @auth(
    rules: [
      { allow: groups, groups: ["Admins"] }
      { allow: private, operations: [read] }
    ]
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  teacherUsername: ID!
  teacherUser: CognitoUser @function(name: "resolveField-${env}")
  timekitResourceId: ID!
  timekitResource: TimekitResource @function(name: "resolveField-${env}")
  topics: [TeachableTopic!]!
    @connection(keyName: "ByTeacherAccountId", fields: ["id"])
  lessons: [Lesson!]! @connection(keyName: "ByTeacherAccountId", fields: ["id"])
}

type TimekitAvailabilityConstraint {
  key: TimekitConstraintType
  value: TimekitConstraint
}

type TimekitBooking {
  id: ID!
  graph: TimekitGraph!
  state: TimekitBookingState!
  completed: Boolean!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  available_actions: [TimekitBookingAction!]!
  customers: [TimekitCustomer!]!
  attributes: TimekitBookingAttributes
  calendar: TimekitBookingCalendar
}

enum TimekitBookingAction {
  cancel
  cancel_by_customer
  cancel_by_owner
  complete
  confirm
  create
  decline
}

type TimekitBookingAttributes {
  event_info: TimekitEvent
}

type TimekitBookingCalendar {
  calendar: TimekitCalendar
}

enum TimekitBookingState {
  cancelled
  cancelled_by_customer
  cancelled_by_host
  completed
  confirmed
  declined
  error
  tentative
}

type TimekitCalendar {
  id: ID!
  name: String
  display_name: String
  description: String
  foregroundColor: String
  backgroundColor: String
  created_at: AWSDateTime
  updated_at: AWSDateTime
}

enum TimekitConstraintType {
  allow_day
  allow_day_and_time
  allow_period
  allow_hours
  allow_weekends
  block_day
  block_day_and_time
  block_period
  block_hours
  block_weekends
}

type TimekitConstraint {
  day: TimekitDay
  start: TimekitPeriodValue
  end: TimekitPeriodValue
}

type TimekitCustomer {
  id: ID!
  name: String!
  email: AWSEmail!
  phone: AWSPhone
  voip: String
  timezone: String!
}

enum TimekitDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

type TimekitEvent {
  description: String
  end: AWSDateTime
  start: AWSDateTime
  what: String
  where: String
}

enum TimekitGraph {
  instant
  confirm_decline
  group_owner
  group_customer
}

# TODO: any required union implementations for TimekitPeriodValue
union TimekitPeriodValue = Int | AWSDateTime

type TimekitResource {
  id: ID!
  name: String!
  timezone: String!
  email: AWSEmail
  first_name: String
  last_name: String
  availabilityConstraints: [TimekitConstraint!]!
  image: AWSURL
}

type Topic
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admins"] }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Teachers"], operations: [create, update] }
    ]
  )
  @model
  @searchable
  @versioned {
  id: ID!
  name: String!
  description: String
  resourceTopics: [ResourceTopic!]!
    @connection(keyName: "ByTopicId", fields: ["id"])
  teachableTopics: [TeachableTopic!]!
    @connection(keyName: "ByTopicId", fields: ["id"])
}

input UpdateLessonInput {
  id: ID!
  timekitBookingId: ID
  stripeUsageRecordId: ID
}

input UpdateStudentAccountInput {
  id: ID!
  stripeSubscriptionId: ID!
}

#type Workspace {

#}

#type WorkspaceUsageRecord {

#}
