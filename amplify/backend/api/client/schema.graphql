type CognitoMFAOption {
  DeliveryMedium: String
  AttributeName: String
}

type CognitoUser {
  Username: String!
  UserAttributes: [CognitoUserAttribute]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: CognitoUserStatus
  MFAOptions: [CognitoMFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}

type CognitoUserAttribute {
  Name: String!
  Value: String
}

enum CognitoUserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}

input CreateCustomerAccountInput {
  customerUsername: ID!
}

input CreateStudentAccountInput {
  givenName: String!
  familyName: String!
  birthdate: AWSDate!
  email: AWSEmail!
}

type CustomerAccount
  @auth(rules: [{ allow: private, provider: iam }])
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "customerAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  customerUsername: ID!
  stripeCustomerId: ID!
}

input DeleteCustomerAccountInput {
  id: ID!
}

input DeleteStudentAccountInput {
  id: ID
}

input ModelCustomerAccountConditionInput {
  and: [ModelCustomerAccountConditionInput]
  or: [ModelCustomerAccountConditionInput]
  not: ModelCustomerAccountConditionInput
}

input ModelStudentAccountConditionInput {
  and: [ModelStudentAccountConditionInput]
  or: [ModelStudentAccountConditionInput]
  not: ModelStudentAccountConditionInput
}

type Mutation {
  createCustomerAccount(
    input: CreateCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  createStudentAccount(
    input: CreateStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  deleteCustomerAccount(
    input: DeleteCustomerAccountInput!
    condition: ModelCustomerAccountConditionInput
  ): CustomerAccount @aws_iam

  deleteStudentAccount(
    input: DeleteStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount

  updateStudentAccount(input: UpdateStudentAccountInput!): StudentAccount
    @aws_iam
}

enum StripeAggregateUsageType {
  sum
  max
}

type StripeCard {
  brand: String!
  exp_month: Int!
  exp_year: Int!
  fingerprint: String!
  funding: StripeFundingType!
  last4: String!
}

type StripeCustomer {
  id: ID!
}

enum StripeFundingType {
  credit
  debit
  prepaid
  unknown
}

enum StripeIntervalType {
  day
  week
  month
  year
}

type StripePaymentMethod {
  id: ID!
  stripeCustomerId: ID
  type: StripePaymentMethodType!
  card: StripeCard
}

enum StripePaymentMethodType {
  alipay
  au_becs_debit
  bacs_debit
  bancontact
  card
  eps
  fpx
  giropay
  ideal
  p24
  sepa_debit
  sofort
}

type StripePrice {
  id: ID!
  product: StripeProduct!
  recurring: StripeRecurringPriceAttributes
  type: StripePriceType!
  unit_amount: Int!
}

enum StripePriceType {
  one_time
  recurring
}

type StripeProduct {
  id: ID!
  description: String
  name: String!
  unit_label: String
}

type StripeRecurringPriceAttributes {
  aggregate_usage: StripeAggregateUsageType!
  interval: StripeIntervalType!
  interval_count: Int!
  usage_type: StripeUsageType!
}

type StripeSubscription {
  id: ID!
  cancel_at_period_end: Boolean!
  current_period_end: AWSTimestamp!
  current_period_start: AWSTimestamp!
  customer: ID!
  default_payment_method: ID
  items: [StripeSubscriptionItem!]!
  status: StripeSubscriptionStatus!
}

type StripeSubscriptionItem {
  id: ID!
  price: StripePrice!
  quantity: Int!
  subscription: ID!
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

type StripeUsageRecord {
  id: ID!
  quantity: Int!
  subscription_item: ID!
  timestamp: AWSTimestamp
}

enum StripeUsageType {
  metered
  licensed
}

type StudentAccount
  @auth(
    rules: [
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: groups, groups: ["Teachers"], operations: [read] }
      {
        allow: owner
        ownerField: "customerUsername"
        operations: [read, delete]
      }
      { allow: owner, ownerField: "studentUsername", operations: [read] }
      { allow: private, provider: iam, operations: [read, update] }
    ]
  )
  @key(
    name: "ByCustomerUsername"
    fields: ["customerUsername"]
    queryField: "studentAccountsByCustomerUsername"
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  customerUsername: ID!
  customerUser: CognitoUser @function(name: "resolveField-${env}")
  studentUsername: ID!
  studentUser: CognitoUser @function(name: "resolveField-${env}")
  stripeSubscriptionId: ID!
  stripeSubscription: StripeSubscription @function(name: "resolveField-${env}")
}

# TODO: update subscription inputs?
type Subscription {
  onCreateCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["createCustomerAccount"])

  onCreateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["createStudentAccount"])

  onDeleteCustomerAccount(
    customerUsername: String
    customerAccountId: String
  ): CustomerAccount @aws_subscribe(mutations: ["deleteCustomerAccount"])

  onDeleteStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["deleteStudentAccount"])

  onUpdateStudentAccount(
    customerUsername: String
    studentUsername: String
  ): StudentAccount @aws_subscribe(mutations: ["updateStudentAccount"])
}

input UpdateStudentAccountInput {
  id: ID!
  stripeSubscriptionId: ID!
}

#type Workspace {

#}

#type WorkspaceUsageRecord {

#}
