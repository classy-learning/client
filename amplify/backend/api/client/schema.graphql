type Mutation {
  createStudentAccount(
    input: CreateStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount
  deleteStudentAccount(
    input: DeleteStudentAccountInput!
    condition: ModelStudentAccountConditionInput
  ): StudentAccount
}

type Subscription {
  onCreateStudentAccount(customerId: String, studentId: String): StudentAccount
    @aws_subscribe(mutations: ["createStudentAccount"])
  onDeleteStudentAccount(customerId: String, studentId: String): StudentAccount
    @aws_subscribe(mutations: ["deleteStudentAccount"])
}

input CreateStudentAccountInput {
  id: ID
  customerId: ID!
}

input DeleteStudentAccountInput {
  id: ID
}

input ModelStudentAccountConditionInput {
  and: [ModelStudentAccountConditionInput]
  or: [ModelStudentAccountConditionInput]
  not: ModelStudentAccountConditionInput
}

type StudentAccount
  @model(mutations: null, subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Customers"], operations: [create] }
      { allow: groups, groups: ["Teachers"], operations: [read] }
      { allow: owner, ownerField: "customerId", operations: [read, delete] }
      { allow: owner, ownerField: "studentId", operations: [read] }
    ]
  ) {
  id: ID!
  customerUsername: ID!
  customerUser: CognitoUser @function(name: "resolveGraphQLField")
  studentUsername: ID!
  studentUser: CognitoUser @function(name: "resolveGraphQLField")
}

type CognitoUser {
  Username: String!
  UserAttributes: [CognitoUserAttribute]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: Boolean
  UserStatus: CognitoUserStatus
  MFAOptions: [CognitoMFAOption]
  PreferredMfaSetting: String
  UserMFASettingList: String
}

type CognitoUserAttribute {
  Name: String!
  Value: String
}

type CognitoMFAOption {
  DeliveryMedium: String
  AttributeName: String
}

enum CognitoUserStatus {
  UNCONFIRMED
  CONFIRMED
  ARCHIVED
  COMPROMISED
  UNKNOWN
  RESET_REQUIRED
  FORCE_CHANGE_PASSWORD
}
